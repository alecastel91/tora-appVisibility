{"ast":null,"code":"/**\n * API Service\n * Handles all communication with the backend\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\nclass ApiService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  // Set authorization header\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n\n  // Save token\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n\n  // Remove token\n  removeToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    const data = await response.json();\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n    return data;\n  }\n\n  // AUTH ENDPOINTS\n  async signup(userData) {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify(userData)\n    });\n    const data = await this.handleResponse(response);\n\n    // Save token if signup successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n    return data;\n  }\n  async login(email, password) {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    const data = await this.handleResponse(response);\n\n    // Save token if login successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n    return data;\n  }\n  async logout() {\n    // Call logout endpoint if needed\n    try {\n      await fetch(`${API_URL}/auth/logout`, {\n        method: 'POST',\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n\n    // Remove token regardless\n    this.removeToken();\n  }\n  async getCurrentUser() {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n\n  // PROFILE ENDPOINTS (we'll add these to backend next)\n  async searchProfiles(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    const response = await fetch(`${API_URL}/profiles?${queryParams}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async getProfile(profileId) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async updateProfile(profileId, profileData) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify(profileData)\n    });\n    return this.handleResponse(response);\n  }\n\n  // CONNECTION ENDPOINTS\n  async likeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async unlikeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async sendConnectionRequest(profileId, message = '') {\n    const response = await fetch(`${API_URL}/connections/request`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        to: profileId,\n        message\n      })\n    });\n    return this.handleResponse(response);\n  }\n\n  // MESSAGE ENDPOINTS\n  async getMessages(userId) {\n    const response = await fetch(`${API_URL}/messages/${userId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async sendMessage(userId, text) {\n    const response = await fetch(`${API_URL}/messages`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        to: userId,\n        text\n      })\n    });\n    return this.handleResponse(response);\n  }\n\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\n\n// Export single instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","ApiService","constructor","token","localStorage","getItem","getHeaders","headers","setToken","setItem","removeToken","removeItem","handleResponse","response","data","json","ok","Error","error","signup","userData","fetch","method","body","JSON","stringify","login","email","password","logout","console","getCurrentUser","searchProfiles","filters","queryParams","URLSearchParams","toString","getProfile","profileId","updateProfile","profileData","likeProfile","unlikeProfile","sendConnectionRequest","message","to","getMessages","userId","sendMessage","text","isAuthenticated","apiService"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/services/api.js"],"sourcesContent":["/**\n * API Service\n * Handles all communication with the backend\n */\n\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:5001/api';\n\nclass ApiService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  // Set authorization header\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n\n    return headers;\n  }\n\n  // Save token\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n\n  // Remove token\n  removeToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    const data = await response.json();\n\n    if (!response.ok) {\n      throw new Error(data.error || 'Something went wrong');\n    }\n\n    return data;\n  }\n\n  // AUTH ENDPOINTS\n  async signup(userData) {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify(userData)\n    });\n\n    const data = await this.handleResponse(response);\n\n    // Save token if signup successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n\n    return data;\n  }\n\n  async login(email, password) {\n    const response = await fetch(`${API_URL}/auth/login`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ email, password })\n    });\n\n    const data = await this.handleResponse(response);\n\n    // Save token if login successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n\n    return data;\n  }\n\n  async logout() {\n    // Call logout endpoint if needed\n    try {\n      await fetch(`${API_URL}/auth/logout`, {\n        method: 'POST',\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n\n    // Remove token regardless\n    this.removeToken();\n  }\n\n  async getCurrentUser() {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // PROFILE ENDPOINTS (we'll add these to backend next)\n  async searchProfiles(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    const response = await fetch(`${API_URL}/profiles?${queryParams}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async getProfile(profileId) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async updateProfile(profileId, profileData) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify(profileData)\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // CONNECTION ENDPOINTS\n  async likeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async unlikeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async sendConnectionRequest(profileId, message = '') {\n    const response = await fetch(`${API_URL}/connections/request`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ to: profileId, message })\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // MESSAGE ENDPOINTS\n  async getMessages(userId) {\n    const response = await fetch(`${API_URL}/messages/${userId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async sendMessage(userId, text) {\n    const response = await fetch(`${API_URL}/messages`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ to: userId, text })\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\n\n// Export single instance\nconst apiService = new ApiService();\nexport default apiService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}