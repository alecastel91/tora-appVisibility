{"ast":null,"code":"var _jsxFileName = \"/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { mockUsers, mockConversations, mockExploreFeed } from '../services/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const useAppContext = () => {\n  _s();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within AppProvider');\n  }\n  return context;\n};\n_s(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AppProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState({\n    id: 1,\n    name: 'Al Jones',\n    role: 'ARTIST',\n    bio: 'Milan-born, Italian-British-Jamaican artist Al Jones started in underground electronic music in 2006. Since young age he gained acclaim in Milan\\'s top clubs, and became resident DJ of the party Vitamina in 2016. Now Tokyo-based, he launched MOVE ムーブ in 2022, an itinerant event celebrating art, self-expression, and electronic music, and founded the record label MOVE TRAX in 2025.',\n    location: 'Tokyo, Japan',\n    city: 'Tokyo',\n    country: 'Japan',\n    avatar: null,\n    genres: ['Techno', 'House', 'Minimal', 'Electronic'],\n    residentAdvisor: '',\n    mixtape: '',\n    spotify: '',\n    instagram: '@aljones',\n    website: 'https://movetrax.com'\n  });\n  const [searchResults, setSearchResults] = useState([]);\n  const [conversations, setConversations] = useState(mockConversations);\n  const [exploreFeed, setExploreFeed] = useState(mockExploreFeed);\n  const [messages, setMessages] = useState({});\n  const [notifications, setNotifications] = useState([]);\n  const updateUser = updates => {\n    setUser(prev => ({\n      ...prev,\n      ...updates\n    }));\n  };\n  const searchUsers = (query, filters) => {\n    let results = mockUsers;\n    if (query) {\n      results = results.filter(u => u.name.toLowerCase().includes(query.toLowerCase()) || u.role.toLowerCase().includes(query.toLowerCase()));\n    }\n    if (filters.role && filters.role !== 'all') {\n      results = results.filter(u => u.role === filters.role);\n    }\n    if (filters.location) {\n      results = results.filter(u => u.location.toLowerCase().includes(filters.location.toLowerCase()));\n    }\n    if (filters.genres && filters.genres.length > 0) {\n      results = results.filter(u => filters.genres.some(genre => {\n        var _u$genres;\n        return (_u$genres = u.genres) === null || _u$genres === void 0 ? void 0 : _u$genres.includes(genre);\n      }));\n    }\n    setSearchResults(results);\n  };\n  const sendMessage = (userId, text) => {\n    const newMessage = {\n      text,\n      timestamp: new Date().toISOString(),\n      isMe: true\n    };\n    setMessages(prev => ({\n      ...prev,\n      [userId]: [...(prev[userId] || []), newMessage]\n    }));\n    setTimeout(() => {\n      const autoReply = {\n        text: \"Thanks for your message! I'll get back to you soon.\",\n        timestamp: new Date().toISOString(),\n        isMe: false\n      };\n      setMessages(prev => ({\n        ...prev,\n        [userId]: [...prev[userId], autoReply]\n      }));\n    }, 1500);\n  };\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n  const value = {\n    user,\n    updateUser,\n    searchResults,\n    searchUsers,\n    conversations,\n    exploreFeed,\n    messages,\n    sendMessage,\n    notifications,\n    addNotification,\n    clearNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n_s2(AppProvider, \"MnfpM00ld0ijcTGZ6SUlmxZTa7M=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","mockUsers","mockConversations","mockExploreFeed","jsxDEV","_jsxDEV","AppContext","useAppContext","_s","context","Error","AppProvider","children","_s2","user","setUser","id","name","role","bio","location","city","country","avatar","genres","residentAdvisor","mixtape","spotify","instagram","website","searchResults","setSearchResults","conversations","setConversations","exploreFeed","setExploreFeed","messages","setMessages","notifications","setNotifications","updateUser","updates","prev","searchUsers","query","filters","results","filter","u","toLowerCase","includes","length","some","genre","_u$genres","sendMessage","userId","text","newMessage","timestamp","Date","toISOString","isMe","setTimeout","autoReply","addNotification","notification","clearNotifications","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { mockUsers, mockConversations, mockExploreFeed } from '../services/mockData';\n\nconst AppContext = createContext();\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within AppProvider');\n  }\n  return context;\n};\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState({\n    id: 1,\n    name: 'Al Jones',\n    role: 'ARTIST',\n    bio: 'Milan-born, Italian-British-Jamaican artist Al Jones started in underground electronic music in 2006. Since young age he gained acclaim in Milan\\'s top clubs, and became resident DJ of the party Vitamina in 2016. Now Tokyo-based, he launched MOVE ムーブ in 2022, an itinerant event celebrating art, self-expression, and electronic music, and founded the record label MOVE TRAX in 2025.',\n    location: 'Tokyo, Japan',\n    city: 'Tokyo',\n    country: 'Japan',\n    avatar: null,\n    genres: ['Techno', 'House', 'Minimal', 'Electronic'],\n    residentAdvisor: '',\n    mixtape: '',\n    spotify: '',\n    instagram: '@aljones',\n    website: 'https://movetrax.com'\n  });\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [conversations, setConversations] = useState(mockConversations);\n  const [exploreFeed, setExploreFeed] = useState(mockExploreFeed);\n  const [messages, setMessages] = useState({});\n  const [notifications, setNotifications] = useState([]);\n\n  const updateUser = (updates) => {\n    setUser(prev => ({ ...prev, ...updates }));\n  };\n\n  const searchUsers = (query, filters) => {\n    let results = mockUsers;\n    \n    if (query) {\n      results = results.filter(u => \n        u.name.toLowerCase().includes(query.toLowerCase()) ||\n        u.role.toLowerCase().includes(query.toLowerCase())\n      );\n    }\n\n    if (filters.role && filters.role !== 'all') {\n      results = results.filter(u => u.role === filters.role);\n    }\n\n    if (filters.location) {\n      results = results.filter(u => \n        u.location.toLowerCase().includes(filters.location.toLowerCase())\n      );\n    }\n\n    if (filters.genres && filters.genres.length > 0) {\n      results = results.filter(u => \n        filters.genres.some(genre => u.genres?.includes(genre))\n      );\n    }\n\n    setSearchResults(results);\n  };\n\n  const sendMessage = (userId, text) => {\n    const newMessage = {\n      text,\n      timestamp: new Date().toISOString(),\n      isMe: true\n    };\n\n    setMessages(prev => ({\n      ...prev,\n      [userId]: [...(prev[userId] || []), newMessage]\n    }));\n\n    setTimeout(() => {\n      const autoReply = {\n        text: \"Thanks for your message! I'll get back to you soon.\",\n        timestamp: new Date().toISOString(),\n        isMe: false\n      };\n      setMessages(prev => ({\n        ...prev,\n        [userId]: [...prev[userId], autoReply]\n      }));\n    }, 1500);\n  };\n\n  const addNotification = (notification) => {\n    setNotifications(prev => [notification, ...prev]);\n  };\n\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n\n  const value = {\n    user,\n    updateUser,\n    searchResults,\n    searchUsers,\n    conversations,\n    exploreFeed,\n    messages,\n    sendMessage,\n    notifications,\n    addNotification,\n    clearNotifications\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,SAASC,SAAS,EAAEC,iBAAiB,EAAEC,eAAe,QAAQ,sBAAsB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAErF,MAAMC,UAAU,gBAAGT,aAAa,CAAC,CAAC;AAElC,OAAO,MAAMU,aAAa,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjC,MAAMC,OAAO,GAAGX,UAAU,CAACQ,UAAU,CAAC;EACtC,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,+CAA+C,CAAC;EAClE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,aAAa;AAQ1B,OAAO,MAAMI,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAC3C,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC;IAC/BiB,EAAE,EAAE,CAAC;IACLC,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE,QAAQ;IACdC,GAAG,EAAE,gYAAgY;IACrYC,QAAQ,EAAE,cAAc;IACxBC,IAAI,EAAE,OAAO;IACbC,OAAO,EAAE,OAAO;IAChBC,MAAM,EAAE,IAAI;IACZC,MAAM,EAAE,CAAC,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,CAAC;IACpDC,eAAe,EAAE,EAAE;IACnBC,OAAO,EAAE,EAAE;IACXC,OAAO,EAAE,EAAE;IACXC,SAAS,EAAE,UAAU;IACrBC,OAAO,EAAE;EACX,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGhC,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACiC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlC,QAAQ,CAACG,iBAAiB,CAAC;EACrE,MAAM,CAACgC,WAAW,EAAEC,cAAc,CAAC,GAAGpC,QAAQ,CAACI,eAAe,CAAC;EAC/D,MAAM,CAACiC,QAAQ,EAAEC,WAAW,CAAC,GAAGtC,QAAQ,CAAC,CAAC,CAAC,CAAC;EAC5C,MAAM,CAACuC,aAAa,EAAEC,gBAAgB,CAAC,GAAGxC,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMyC,UAAU,GAAIC,OAAO,IAAK;IAC9B1B,OAAO,CAAC2B,IAAI,KAAK;MAAE,GAAGA,IAAI;MAAE,GAAGD;IAAQ,CAAC,CAAC,CAAC;EAC5C,CAAC;EAED,MAAME,WAAW,GAAGA,CAACC,KAAK,EAAEC,OAAO,KAAK;IACtC,IAAIC,OAAO,GAAG7C,SAAS;IAEvB,IAAI2C,KAAK,EAAE;MACTE,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACC,CAAC,IACxBA,CAAC,CAAC/B,IAAI,CAACgC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CAAC,IAClDD,CAAC,CAAC9B,IAAI,CAAC+B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACN,KAAK,CAACK,WAAW,CAAC,CAAC,CACnD,CAAC;IACH;IAEA,IAAIJ,OAAO,CAAC3B,IAAI,IAAI2B,OAAO,CAAC3B,IAAI,KAAK,KAAK,EAAE;MAC1C4B,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACC,CAAC,IAAIA,CAAC,CAAC9B,IAAI,KAAK2B,OAAO,CAAC3B,IAAI,CAAC;IACxD;IAEA,IAAI2B,OAAO,CAACzB,QAAQ,EAAE;MACpB0B,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACC,CAAC,IACxBA,CAAC,CAAC5B,QAAQ,CAAC6B,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACL,OAAO,CAACzB,QAAQ,CAAC6B,WAAW,CAAC,CAAC,CAClE,CAAC;IACH;IAEA,IAAIJ,OAAO,CAACrB,MAAM,IAAIqB,OAAO,CAACrB,MAAM,CAAC2B,MAAM,GAAG,CAAC,EAAE;MAC/CL,OAAO,GAAGA,OAAO,CAACC,MAAM,CAACC,CAAC,IACxBH,OAAO,CAACrB,MAAM,CAAC4B,IAAI,CAACC,KAAK;QAAA,IAAAC,SAAA;QAAA,QAAAA,SAAA,GAAIN,CAAC,CAACxB,MAAM,cAAA8B,SAAA,uBAARA,SAAA,CAAUJ,QAAQ,CAACG,KAAK,CAAC;MAAA,EACxD,CAAC;IACH;IAEAtB,gBAAgB,CAACe,OAAO,CAAC;EAC3B,CAAC;EAED,MAAMS,WAAW,GAAGA,CAACC,MAAM,EAAEC,IAAI,KAAK;IACpC,MAAMC,UAAU,GAAG;MACjBD,IAAI;MACJE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MACnCC,IAAI,EAAE;IACR,CAAC;IAEDzB,WAAW,CAACK,IAAI,KAAK;MACnB,GAAGA,IAAI;MACP,CAACc,MAAM,GAAG,CAAC,IAAId,IAAI,CAACc,MAAM,CAAC,IAAI,EAAE,CAAC,EAAEE,UAAU;IAChD,CAAC,CAAC,CAAC;IAEHK,UAAU,CAAC,MAAM;MACf,MAAMC,SAAS,GAAG;QAChBP,IAAI,EAAE,qDAAqD;QAC3DE,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;QACnCC,IAAI,EAAE;MACR,CAAC;MACDzB,WAAW,CAACK,IAAI,KAAK;QACnB,GAAGA,IAAI;QACP,CAACc,MAAM,GAAG,CAAC,GAAGd,IAAI,CAACc,MAAM,CAAC,EAAEQ,SAAS;MACvC,CAAC,CAAC,CAAC;IACL,CAAC,EAAE,IAAI,CAAC;EACV,CAAC;EAED,MAAMC,eAAe,GAAIC,YAAY,IAAK;IACxC3B,gBAAgB,CAACG,IAAI,IAAI,CAACwB,YAAY,EAAE,GAAGxB,IAAI,CAAC,CAAC;EACnD,CAAC;EAED,MAAMyB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B5B,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,MAAM6B,KAAK,GAAG;IACZtD,IAAI;IACJ0B,UAAU;IACVV,aAAa;IACba,WAAW;IACXX,aAAa;IACbE,WAAW;IACXE,QAAQ;IACRmB,WAAW;IACXjB,aAAa;IACb2B,eAAe;IACfE;EACF,CAAC;EAED,oBACE9D,OAAA,CAACC,UAAU,CAAC+D,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAxD,QAAA,EAC/BA;EAAQ;IAAA0D,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACU,CAAC;AAE1B,CAAC;AAAC5D,GAAA,CA7GWF,WAAW;AAAA+D,EAAA,GAAX/D,WAAW;AAAA,IAAA+D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}