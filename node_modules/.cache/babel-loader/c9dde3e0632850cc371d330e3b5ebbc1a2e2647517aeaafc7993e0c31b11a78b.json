{"ast":null,"code":"/**\n * Resident Advisor API Service\n * This service handles all RA-related API calls\n * Currently uses mock data but structured to easily switch to real API\n */\n\n// Configuration - will be moved to environment variables\nconst RA_API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_RA_API_URL || 'https://api.ra.co/v1',\n  // Example URL\n  API_KEY: process.env.REACT_APP_RA_API_KEY || '',\n  USE_MOCK_DATA: process.env.REACT_APP_USE_MOCK_DATA !== 'false' // Default to true\n};\n\n// Mock data for development\nconst MOCK_EVENTS_DATA = {\n  'al-jones': {\n    upcoming: [{\n      id: 'evt_001',\n      date: '2024-02-10',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Fabric London',\n        city: 'London',\n        country: 'UK',\n        capacity: 2500\n      },\n      event: {\n        name: 'FUSE presents',\n        startTime: '23:00',\n        endTime: '06:00',\n        lineup: ['Al Jones', 'Enzo Siragusa', 'Archie Hamilton']\n      },\n      tickets: {\n        status: 'on_sale',\n        price: '£25-35',\n        url: 'https://ra.co/events/1234567'\n      }\n    }, {\n      id: 'evt_002',\n      date: '2024-02-17',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Berghain',\n        city: 'Berlin',\n        country: 'Germany',\n        capacity: 1500\n      },\n      event: {\n        name: 'Klubnacht',\n        startTime: '23:59',\n        endTime: '12:00',\n        lineup: ['Al Jones', 'Ben Klock', 'Marcel Dettmann']\n      },\n      tickets: {\n        status: 'few_left',\n        price: '€20',\n        url: 'https://ra.co/events/1234568'\n      }\n    }, {\n      id: 'evt_003',\n      date: '2024-02-24',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Womb',\n        city: 'Tokyo',\n        country: 'Japan',\n        capacity: 1000\n      },\n      event: {\n        name: 'Techno Invasion',\n        startTime: '22:00',\n        endTime: '05:00',\n        lineup: ['Al Jones', 'DJ Nobu', 'Haruka']\n      },\n      tickets: {\n        status: 'on_sale',\n        price: '¥4000-5000',\n        url: 'https://ra.co/events/1234569'\n      }\n    }],\n    past: [{\n      id: 'evt_p01',\n      date: '2024-01-20',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Watergate',\n        city: 'Berlin',\n        country: 'Germany',\n        capacity: 700\n      },\n      event: {\n        name: 'Watergate Night',\n        startTime: '23:00',\n        endTime: '08:00',\n        lineup: ['Al Jones', 'Matthias Meyer', 'Adana Twins']\n      },\n      media: {\n        photos: 45,\n        videos: 3,\n        url: 'https://ra.co/events/1234560/media'\n      }\n    }, {\n      id: 'evt_p02',\n      date: '2024-01-13',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Rex Club',\n        city: 'Paris',\n        country: 'France',\n        capacity: 500\n      },\n      event: {\n        name: 'Rex Club presents',\n        startTime: '23:30',\n        endTime: '06:00',\n        lineup: ['Al Jones', 'Molly', 'D\\'Julz']\n      },\n      media: {\n        photos: 23,\n        videos: 1,\n        url: 'https://ra.co/events/1234559/media'\n      }\n    }, {\n      id: 'evt_p03',\n      date: '2024-01-06',\n      dayOfWeek: 'SAT',\n      venue: {\n        name: 'Output',\n        city: 'New York',\n        country: 'USA',\n        capacity: 600\n      },\n      event: {\n        name: 'Output Rooftop',\n        startTime: '22:00',\n        endTime: '04:00',\n        lineup: ['Al Jones', 'Nicole Moudaber', 'Victor Calderone']\n      },\n      media: {\n        photos: 67,\n        videos: 5,\n        url: 'https://ra.co/events/1234558/media'\n      }\n    }, {\n      id: 'evt_p04',\n      date: '2023-12-31',\n      dayOfWeek: 'SUN',\n      venue: {\n        name: 'Panorama Bar',\n        city: 'Berlin',\n        country: 'Germany',\n        capacity: 300\n      },\n      event: {\n        name: 'NYE Special',\n        startTime: '23:00',\n        endTime: '12:00',\n        lineup: ['Al Jones', 'Âme', 'Dixon']\n      },\n      media: {\n        photos: 120,\n        videos: 8,\n        url: 'https://ra.co/events/1234557/media'\n      }\n    }]\n  }\n};\nclass RAService {\n  constructor() {\n    this.baseUrl = RA_API_CONFIG.BASE_URL;\n    this.apiKey = RA_API_CONFIG.API_KEY;\n    this.useMockData = RA_API_CONFIG.USE_MOCK_DATA;\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes cache\n  }\n\n  /**\n   * Get headers for API requests\n   */\n  getHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.apiKey}`,\n      'X-RA-API-Version': '1.0'\n    };\n  }\n\n  /**\n   * Format artist name to RA slug format\n   */\n  formatArtistSlug(artistName) {\n    return artistName.toLowerCase().replace(/\\s+/g, '-').replace(/[^a-z0-9-]/g, '');\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  isCacheValid(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return false;\n    return Date.now() - cached.timestamp < this.cacheTimeout;\n  }\n\n  /**\n   * Get upcoming and past events for an artist\n   */\n  async getArtistEvents(artistName, type = 'upcoming') {\n    const slug = this.formatArtistSlug(artistName);\n    const cacheKey = `events_${slug}_${type}`;\n\n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      console.log(`Returning cached ${type} events for:`, artistName);\n      return this.cache.get(cacheKey).data;\n    }\n\n    // If using mock data (development mode)\n    if (this.useMockData) {\n      var _MOCK_EVENTS_DATA$slu;\n      console.log(`Using mock ${type} data for:`, artistName);\n      const mockData = ((_MOCK_EVENTS_DATA$slu = MOCK_EVENTS_DATA[slug]) === null || _MOCK_EVENTS_DATA$slu === void 0 ? void 0 : _MOCK_EVENTS_DATA$slu[type]) || [];\n      this.cache.set(cacheKey, {\n        data: mockData,\n        timestamp: Date.now()\n      });\n      return mockData;\n    }\n\n    // Real API call\n    try {\n      const endpoint = type === 'past' ? `${this.baseUrl}/artists/${slug}/events/past` : `${this.baseUrl}/artists/${slug}/events`;\n      const response = await fetch(endpoint, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n      const data = await response.json();\n\n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: data.events || [],\n        timestamp: Date.now()\n      });\n      return data.events || [];\n    } catch (error) {\n      var _MOCK_EVENTS_DATA$slu2;\n      console.error(`Error fetching RA ${type} events:`, error);\n\n      // Fallback to mock data if API fails\n      if ((_MOCK_EVENTS_DATA$slu2 = MOCK_EVENTS_DATA[slug]) !== null && _MOCK_EVENTS_DATA$slu2 !== void 0 && _MOCK_EVENTS_DATA$slu2[type]) {\n        console.log(`Falling back to mock ${type} data due to API error`);\n        return MOCK_EVENTS_DATA[slug][type];\n      }\n      throw error;\n    }\n  }\n\n  /**\n   * Get artist profile information\n   */\n  async getArtistProfile(artistName) {\n    const slug = this.formatArtistSlug(artistName);\n    const cacheKey = `profile_${slug}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n    if (this.useMockData) {\n      const mockProfile = {\n        name: artistName,\n        slug: slug,\n        bio: 'Electronic music artist',\n        location: 'Tokyo, Japan',\n        raUrl: `https://ra.co/dj/${slug}`,\n        followersCount: 12500,\n        upcomingEvents: 5\n      };\n      this.cache.set(cacheKey, {\n        data: mockProfile,\n        timestamp: Date.now()\n      });\n      return mockProfile;\n    }\n\n    // Real API implementation would go here\n    try {\n      const response = await fetch(`${this.baseUrl}/artists/${slug}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n      const data = await response.json();\n      this.cache.set(cacheKey, {\n        data: data,\n        timestamp: Date.now()\n      });\n      return data;\n    } catch (error) {\n      console.error('Error fetching RA profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for events by location and date\n   */\n  async searchEvents(params = {}) {\n    const {\n      city,\n      country,\n      dateFrom,\n      dateTo,\n      genre\n    } = params;\n    const cacheKey = `search_${JSON.stringify(params)}`;\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n    if (this.useMockData) {\n      // Return mock search results\n      return [];\n    }\n\n    // Real API implementation\n    try {\n      const queryParams = new URLSearchParams();\n      if (city) queryParams.append('city', city);\n      if (country) queryParams.append('country', country);\n      if (dateFrom) queryParams.append('date_from', dateFrom);\n      if (dateTo) queryParams.append('date_to', dateTo);\n      if (genre) queryParams.append('genre', genre);\n      const response = await fetch(`${this.baseUrl}/events?${queryParams}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n      const data = await response.json();\n      this.cache.set(cacheKey, {\n        data: data.events || [],\n        timestamp: Date.now()\n      });\n      return data.events || [];\n    } catch (error) {\n      console.error('Error searching RA events:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nconst raService = new RAService();\nexport default raService;","map":{"version":3,"names":["RA_API_CONFIG","BASE_URL","process","env","REACT_APP_RA_API_URL","API_KEY","REACT_APP_RA_API_KEY","USE_MOCK_DATA","REACT_APP_USE_MOCK_DATA","MOCK_EVENTS_DATA","upcoming","id","date","dayOfWeek","venue","name","city","country","capacity","event","startTime","endTime","lineup","tickets","status","price","url","past","media","photos","videos","RAService","constructor","baseUrl","apiKey","useMockData","cache","Map","cacheTimeout","getHeaders","formatArtistSlug","artistName","toLowerCase","replace","isCacheValid","key","cached","get","Date","now","timestamp","getArtistEvents","type","slug","cacheKey","console","log","data","_MOCK_EVENTS_DATA$slu","mockData","set","endpoint","response","fetch","method","headers","ok","Error","json","events","error","_MOCK_EVENTS_DATA$slu2","getArtistProfile","mockProfile","bio","location","raUrl","followersCount","upcomingEvents","searchEvents","params","dateFrom","dateTo","genre","JSON","stringify","queryParams","URLSearchParams","append","clearCache","clear","raService"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/services/raService.js"],"sourcesContent":["/**\n * Resident Advisor API Service\n * This service handles all RA-related API calls\n * Currently uses mock data but structured to easily switch to real API\n */\n\n// Configuration - will be moved to environment variables\nconst RA_API_CONFIG = {\n  BASE_URL: process.env.REACT_APP_RA_API_URL || 'https://api.ra.co/v1', // Example URL\n  API_KEY: process.env.REACT_APP_RA_API_KEY || '',\n  USE_MOCK_DATA: process.env.REACT_APP_USE_MOCK_DATA !== 'false' // Default to true\n};\n\n// Mock data for development\nconst MOCK_EVENTS_DATA = {\n  'al-jones': {\n    upcoming: [\n      {\n        id: 'evt_001',\n        date: '2024-02-10',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Fabric London',\n          city: 'London',\n          country: 'UK',\n          capacity: 2500\n        },\n        event: {\n          name: 'FUSE presents',\n          startTime: '23:00',\n          endTime: '06:00',\n          lineup: ['Al Jones', 'Enzo Siragusa', 'Archie Hamilton']\n        },\n        tickets: {\n          status: 'on_sale',\n          price: '£25-35',\n          url: 'https://ra.co/events/1234567'\n        }\n      },\n      {\n        id: 'evt_002',\n        date: '2024-02-17',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Berghain',\n          city: 'Berlin',\n          country: 'Germany',\n          capacity: 1500\n        },\n        event: {\n          name: 'Klubnacht',\n          startTime: '23:59',\n          endTime: '12:00',\n          lineup: ['Al Jones', 'Ben Klock', 'Marcel Dettmann']\n        },\n        tickets: {\n          status: 'few_left',\n          price: '€20',\n          url: 'https://ra.co/events/1234568'\n        }\n      },\n      {\n        id: 'evt_003',\n        date: '2024-02-24',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Womb',\n          city: 'Tokyo',\n          country: 'Japan',\n          capacity: 1000\n        },\n        event: {\n          name: 'Techno Invasion',\n          startTime: '22:00',\n          endTime: '05:00',\n          lineup: ['Al Jones', 'DJ Nobu', 'Haruka']\n        },\n        tickets: {\n          status: 'on_sale',\n          price: '¥4000-5000',\n          url: 'https://ra.co/events/1234569'\n        }\n      }\n    ],\n    past: [\n      {\n        id: 'evt_p01',\n        date: '2024-01-20',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Watergate',\n          city: 'Berlin',\n          country: 'Germany',\n          capacity: 700\n        },\n        event: {\n          name: 'Watergate Night',\n          startTime: '23:00',\n          endTime: '08:00',\n          lineup: ['Al Jones', 'Matthias Meyer', 'Adana Twins']\n        },\n        media: {\n          photos: 45,\n          videos: 3,\n          url: 'https://ra.co/events/1234560/media'\n        }\n      },\n      {\n        id: 'evt_p02',\n        date: '2024-01-13',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Rex Club',\n          city: 'Paris',\n          country: 'France',\n          capacity: 500\n        },\n        event: {\n          name: 'Rex Club presents',\n          startTime: '23:30',\n          endTime: '06:00',\n          lineup: ['Al Jones', 'Molly', 'D\\'Julz']\n        },\n        media: {\n          photos: 23,\n          videos: 1,\n          url: 'https://ra.co/events/1234559/media'\n        }\n      },\n      {\n        id: 'evt_p03',\n        date: '2024-01-06',\n        dayOfWeek: 'SAT',\n        venue: {\n          name: 'Output',\n          city: 'New York',\n          country: 'USA',\n          capacity: 600\n        },\n        event: {\n          name: 'Output Rooftop',\n          startTime: '22:00',\n          endTime: '04:00',\n          lineup: ['Al Jones', 'Nicole Moudaber', 'Victor Calderone']\n        },\n        media: {\n          photos: 67,\n          videos: 5,\n          url: 'https://ra.co/events/1234558/media'\n        }\n      },\n      {\n        id: 'evt_p04',\n        date: '2023-12-31',\n        dayOfWeek: 'SUN',\n        venue: {\n          name: 'Panorama Bar',\n          city: 'Berlin',\n          country: 'Germany',\n          capacity: 300\n        },\n        event: {\n          name: 'NYE Special',\n          startTime: '23:00',\n          endTime: '12:00',\n          lineup: ['Al Jones', 'Âme', 'Dixon']\n        },\n        media: {\n          photos: 120,\n          videos: 8,\n          url: 'https://ra.co/events/1234557/media'\n        }\n      }\n    ]\n  }\n};\n\nclass RAService {\n  constructor() {\n    this.baseUrl = RA_API_CONFIG.BASE_URL;\n    this.apiKey = RA_API_CONFIG.API_KEY;\n    this.useMockData = RA_API_CONFIG.USE_MOCK_DATA;\n    this.cache = new Map();\n    this.cacheTimeout = 5 * 60 * 1000; // 5 minutes cache\n  }\n\n  /**\n   * Get headers for API requests\n   */\n  getHeaders() {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${this.apiKey}`,\n      'X-RA-API-Version': '1.0'\n    };\n  }\n\n  /**\n   * Format artist name to RA slug format\n   */\n  formatArtistSlug(artistName) {\n    return artistName.toLowerCase()\n      .replace(/\\s+/g, '-')\n      .replace(/[^a-z0-9-]/g, '');\n  }\n\n  /**\n   * Check if cached data is still valid\n   */\n  isCacheValid(key) {\n    const cached = this.cache.get(key);\n    if (!cached) return false;\n    return Date.now() - cached.timestamp < this.cacheTimeout;\n  }\n\n  /**\n   * Get upcoming and past events for an artist\n   */\n  async getArtistEvents(artistName, type = 'upcoming') {\n    const slug = this.formatArtistSlug(artistName);\n    const cacheKey = `events_${slug}_${type}`;\n\n    // Check cache first\n    if (this.isCacheValid(cacheKey)) {\n      console.log(`Returning cached ${type} events for:`, artistName);\n      return this.cache.get(cacheKey).data;\n    }\n\n    // If using mock data (development mode)\n    if (this.useMockData) {\n      console.log(`Using mock ${type} data for:`, artistName);\n      const mockData = MOCK_EVENTS_DATA[slug]?.[type] || [];\n      this.cache.set(cacheKey, {\n        data: mockData,\n        timestamp: Date.now()\n      });\n      return mockData;\n    }\n\n    // Real API call\n    try {\n      const endpoint = type === 'past' \n        ? `${this.baseUrl}/artists/${slug}/events/past`\n        : `${this.baseUrl}/artists/${slug}/events`;\n        \n      const response = await fetch(endpoint, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      // Cache the result\n      this.cache.set(cacheKey, {\n        data: data.events || [],\n        timestamp: Date.now()\n      });\n\n      return data.events || [];\n    } catch (error) {\n      console.error(`Error fetching RA ${type} events:`, error);\n      \n      // Fallback to mock data if API fails\n      if (MOCK_EVENTS_DATA[slug]?.[type]) {\n        console.log(`Falling back to mock ${type} data due to API error`);\n        return MOCK_EVENTS_DATA[slug][type];\n      }\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Get artist profile information\n   */\n  async getArtistProfile(artistName) {\n    const slug = this.formatArtistSlug(artistName);\n    const cacheKey = `profile_${slug}`;\n\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    if (this.useMockData) {\n      const mockProfile = {\n        name: artistName,\n        slug: slug,\n        bio: 'Electronic music artist',\n        location: 'Tokyo, Japan',\n        raUrl: `https://ra.co/dj/${slug}`,\n        followersCount: 12500,\n        upcomingEvents: 5\n      };\n      \n      this.cache.set(cacheKey, {\n        data: mockProfile,\n        timestamp: Date.now()\n      });\n      \n      return mockProfile;\n    }\n\n    // Real API implementation would go here\n    try {\n      const response = await fetch(`${this.baseUrl}/artists/${slug}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      this.cache.set(cacheKey, {\n        data: data,\n        timestamp: Date.now()\n      });\n\n      return data;\n    } catch (error) {\n      console.error('Error fetching RA profile:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Search for events by location and date\n   */\n  async searchEvents(params = {}) {\n    const { city, country, dateFrom, dateTo, genre } = params;\n    const cacheKey = `search_${JSON.stringify(params)}`;\n\n    if (this.isCacheValid(cacheKey)) {\n      return this.cache.get(cacheKey).data;\n    }\n\n    if (this.useMockData) {\n      // Return mock search results\n      return [];\n    }\n\n    // Real API implementation\n    try {\n      const queryParams = new URLSearchParams();\n      if (city) queryParams.append('city', city);\n      if (country) queryParams.append('country', country);\n      if (dateFrom) queryParams.append('date_from', dateFrom);\n      if (dateTo) queryParams.append('date_to', dateTo);\n      if (genre) queryParams.append('genre', genre);\n\n      const response = await fetch(`${this.baseUrl}/events?${queryParams}`, {\n        method: 'GET',\n        headers: this.getHeaders()\n      });\n\n      if (!response.ok) {\n        throw new Error(`RA API Error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      \n      this.cache.set(cacheKey, {\n        data: data.events || [],\n        timestamp: Date.now()\n      });\n\n      return data.events || [];\n    } catch (error) {\n      console.error('Error searching RA events:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Clear cache\n   */\n  clearCache() {\n    this.cache.clear();\n  }\n}\n\n// Export singleton instance\nconst raService = new RAService();\nexport default raService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}