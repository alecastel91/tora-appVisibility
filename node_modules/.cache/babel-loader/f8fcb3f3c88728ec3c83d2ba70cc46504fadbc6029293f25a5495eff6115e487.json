{"ast":null,"code":"/**\n * API Service\n * Handles all communication with the backend\n */\n\n// Use relative URL to work with proxy\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\nclass ApiService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  // Set authorization header\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n    return headers;\n  }\n\n  // Save token\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n\n  // Remove token\n  removeToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    // First check if the response is ok\n    if (!response.ok) {\n      // Try to parse error message\n      let errorMessage = 'Something went wrong';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch (e) {\n        // If parsing fails, use status text\n        errorMessage = response.statusText || errorMessage;\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Try to parse successful response\n    try {\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Failed to parse response:', error);\n      throw new Error('Invalid response format from server');\n    }\n  }\n\n  // AUTH ENDPOINTS\n  async signup(userData) {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify(userData)\n    });\n    const data = await this.handleResponse(response);\n\n    // Save token if signup successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n    return data;\n  }\n  async login(email, password) {\n    console.log('API Service: Attempting login to', `${API_URL}/auth/login`);\n    try {\n      const response = await fetch(`${API_URL}/auth/login`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      console.log('API Service: Response status', response.status);\n      const data = await this.handleResponse(response);\n\n      // Save token if login successful\n      if (data.token) {\n        this.setToken(data.token);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Service: Login failed', error);\n      throw error;\n    }\n  }\n  async logout() {\n    // Call logout endpoint if needed\n    try {\n      await fetch(`${API_URL}/auth/logout`, {\n        method: 'POST',\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n\n    // Remove token regardless\n    this.removeToken();\n  }\n  async getCurrentUser() {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n\n  // PROFILE ENDPOINTS (we'll add these to backend next)\n  async searchProfiles(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    const response = await fetch(`${API_URL}/profiles?${queryParams}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async getProfile(profileId) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async updateProfile(profileId, profileData) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify(profileData)\n    });\n    return this.handleResponse(response);\n  }\n\n  // CONNECTION ENDPOINTS\n  async likeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async unlikeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async sendConnectionRequest(profileId, message = '') {\n    const response = await fetch(`${API_URL}/connections/request`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        to: profileId,\n        message\n      })\n    });\n    return this.handleResponse(response);\n  }\n\n  // MESSAGE ENDPOINTS\n  async getMessages(userId) {\n    const response = await fetch(`${API_URL}/messages/${userId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n    return this.handleResponse(response);\n  }\n  async sendMessage(userId, text) {\n    const response = await fetch(`${API_URL}/messages`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({\n        to: userId,\n        text\n      })\n    });\n    return this.handleResponse(response);\n  }\n\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\n\n// Export single instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","ApiService","constructor","token","localStorage","getItem","getHeaders","headers","setToken","setItem","removeToken","removeItem","handleResponse","response","ok","errorMessage","errorData","json","error","e","statusText","Error","data","console","signup","userData","fetch","method","body","JSON","stringify","login","email","password","log","status","logout","getCurrentUser","searchProfiles","filters","queryParams","URLSearchParams","toString","getProfile","profileId","updateProfile","profileData","likeProfile","unlikeProfile","sendConnectionRequest","message","to","getMessages","userId","sendMessage","text","isAuthenticated","apiService"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/services/api.js"],"sourcesContent":["/**\n * API Service\n * Handles all communication with the backend\n */\n\n// Use relative URL to work with proxy\nconst API_URL = process.env.REACT_APP_API_URL || '/api';\n\nclass ApiService {\n  constructor() {\n    this.token = localStorage.getItem('token');\n  }\n\n  // Set authorization header\n  getHeaders() {\n    const headers = {\n      'Content-Type': 'application/json'\n    };\n\n    if (this.token) {\n      headers['Authorization'] = `Bearer ${this.token}`;\n    }\n\n    return headers;\n  }\n\n  // Save token\n  setToken(token) {\n    this.token = token;\n    localStorage.setItem('token', token);\n  }\n\n  // Remove token\n  removeToken() {\n    this.token = null;\n    localStorage.removeItem('token');\n  }\n\n  // Handle API response\n  async handleResponse(response) {\n    // First check if the response is ok\n    if (!response.ok) {\n      // Try to parse error message\n      let errorMessage = 'Something went wrong';\n      try {\n        const errorData = await response.json();\n        errorMessage = errorData.error || errorMessage;\n      } catch (e) {\n        // If parsing fails, use status text\n        errorMessage = response.statusText || errorMessage;\n      }\n      throw new Error(errorMessage);\n    }\n\n    // Try to parse successful response\n    try {\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Failed to parse response:', error);\n      throw new Error('Invalid response format from server');\n    }\n  }\n\n  // AUTH ENDPOINTS\n  async signup(userData) {\n    const response = await fetch(`${API_URL}/auth/signup`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify(userData)\n    });\n\n    const data = await this.handleResponse(response);\n\n    // Save token if signup successful\n    if (data.token) {\n      this.setToken(data.token);\n    }\n\n    return data;\n  }\n\n  async login(email, password) {\n    console.log('API Service: Attempting login to', `${API_URL}/auth/login`);\n\n    try {\n      const response = await fetch(`${API_URL}/auth/login`, {\n        method: 'POST',\n        headers: this.getHeaders(),\n        body: JSON.stringify({ email, password })\n      });\n\n      console.log('API Service: Response status', response.status);\n      const data = await this.handleResponse(response);\n\n      // Save token if login successful\n      if (data.token) {\n        this.setToken(data.token);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('API Service: Login failed', error);\n      throw error;\n    }\n  }\n\n  async logout() {\n    // Call logout endpoint if needed\n    try {\n      await fetch(`${API_URL}/auth/logout`, {\n        method: 'POST',\n        headers: this.getHeaders()\n      });\n    } catch (error) {\n      console.error('Logout error:', error);\n    }\n\n    // Remove token regardless\n    this.removeToken();\n  }\n\n  async getCurrentUser() {\n    const response = await fetch(`${API_URL}/auth/me`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // PROFILE ENDPOINTS (we'll add these to backend next)\n  async searchProfiles(filters = {}) {\n    const queryParams = new URLSearchParams(filters).toString();\n    const response = await fetch(`${API_URL}/profiles?${queryParams}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async getProfile(profileId) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async updateProfile(profileId, profileData) {\n    const response = await fetch(`${API_URL}/profiles/${profileId}`, {\n      method: 'PUT',\n      headers: this.getHeaders(),\n      body: JSON.stringify(profileData)\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // CONNECTION ENDPOINTS\n  async likeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'POST',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async unlikeProfile(profileId) {\n    const response = await fetch(`${API_URL}/connections/like/${profileId}`, {\n      method: 'DELETE',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async sendConnectionRequest(profileId, message = '') {\n    const response = await fetch(`${API_URL}/connections/request`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ to: profileId, message })\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // MESSAGE ENDPOINTS\n  async getMessages(userId) {\n    const response = await fetch(`${API_URL}/messages/${userId}`, {\n      method: 'GET',\n      headers: this.getHeaders()\n    });\n\n    return this.handleResponse(response);\n  }\n\n  async sendMessage(userId, text) {\n    const response = await fetch(`${API_URL}/messages`, {\n      method: 'POST',\n      headers: this.getHeaders(),\n      body: JSON.stringify({ to: userId, text })\n    });\n\n    return this.handleResponse(response);\n  }\n\n  // Check if user is logged in\n  isAuthenticated() {\n    return !!this.token;\n  }\n}\n\n// Export single instance\nconst apiService = new ApiService();\nexport default apiService;"],"mappings":"AAAA;AACA;AACA;AACA;;AAEA;AACA,MAAMA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,MAAM;AAEvD,MAAMC,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC5C;;EAEA;EACAC,UAAUA,CAAA,EAAG;IACX,MAAMC,OAAO,GAAG;MACd,cAAc,EAAE;IAClB,CAAC;IAED,IAAI,IAAI,CAACJ,KAAK,EAAE;MACdI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAU,IAAI,CAACJ,KAAK,EAAE;IACnD;IAEA,OAAOI,OAAO;EAChB;;EAEA;EACAC,QAAQA,CAACL,KAAK,EAAE;IACd,IAAI,CAACA,KAAK,GAAGA,KAAK;IAClBC,YAAY,CAACK,OAAO,CAAC,OAAO,EAAEN,KAAK,CAAC;EACtC;;EAEA;EACAO,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACP,KAAK,GAAG,IAAI;IACjBC,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;EAClC;;EAEA;EACA,MAAMC,cAAcA,CAACC,QAAQ,EAAE;IAC7B;IACA,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;MAChB;MACA,IAAIC,YAAY,GAAG,sBAAsB;MACzC,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;QACvCF,YAAY,GAAGC,SAAS,CAACE,KAAK,IAAIH,YAAY;MAChD,CAAC,CAAC,OAAOI,CAAC,EAAE;QACV;QACAJ,YAAY,GAAGF,QAAQ,CAACO,UAAU,IAAIL,YAAY;MACpD;MACA,MAAM,IAAIM,KAAK,CAACN,YAAY,CAAC;IAC/B;;IAEA;IACA,IAAI;MACF,MAAMO,IAAI,GAAG,MAAMT,QAAQ,CAACI,IAAI,CAAC,CAAC;MAClC,OAAOK,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAM,IAAIG,KAAK,CAAC,qCAAqC,CAAC;IACxD;EACF;;EAEA;EACA,MAAMG,MAAMA,CAACC,QAAQ,EAAE;IACrB,MAAMZ,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,cAAc,EAAE;MACrD8B,MAAM,EAAE,MAAM;MACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;MAC1BsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC;IAEF,MAAMH,IAAI,GAAG,MAAM,IAAI,CAACV,cAAc,CAACC,QAAQ,CAAC;;IAEhD;IACA,IAAIS,IAAI,CAACnB,KAAK,EAAE;MACd,IAAI,CAACK,QAAQ,CAACc,IAAI,CAACnB,KAAK,CAAC;IAC3B;IAEA,OAAOmB,IAAI;EACb;EAEA,MAAMS,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;IAC3BV,OAAO,CAACW,GAAG,CAAC,kCAAkC,EAAE,GAAGrC,OAAO,aAAa,CAAC;IAExE,IAAI;MACF,MAAMgB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,aAAa,EAAE;QACpD8B,MAAM,EAAE,MAAM;QACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;QAC1BsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAEE,KAAK;UAAEC;QAAS,CAAC;MAC1C,CAAC,CAAC;MAEFV,OAAO,CAACW,GAAG,CAAC,8BAA8B,EAAErB,QAAQ,CAACsB,MAAM,CAAC;MAC5D,MAAMb,IAAI,GAAG,MAAM,IAAI,CAACV,cAAc,CAACC,QAAQ,CAAC;;MAEhD;MACA,IAAIS,IAAI,CAACnB,KAAK,EAAE;QACd,IAAI,CAACK,QAAQ,CAACc,IAAI,CAACnB,KAAK,CAAC;MAC3B;MAEA,OAAOmB,IAAI;IACb,CAAC,CAAC,OAAOJ,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;EAEA,MAAMkB,MAAMA,CAAA,EAAG;IACb;IACA,IAAI;MACF,MAAMV,KAAK,CAAC,GAAG7B,OAAO,cAAc,EAAE;QACpC8B,MAAM,EAAE,MAAM;QACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;MAC3B,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOY,KAAK,EAAE;MACdK,OAAO,CAACL,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;IACvC;;IAEA;IACA,IAAI,CAACR,WAAW,CAAC,CAAC;EACpB;EAEA,MAAM2B,cAAcA,CAAA,EAAG;IACrB,MAAMxB,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,UAAU,EAAE;MACjD8B,MAAM,EAAE,KAAK;MACbpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;;EAEA;EACA,MAAMyB,cAAcA,CAACC,OAAO,GAAG,CAAC,CAAC,EAAE;IACjC,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,OAAO,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC3D,MAAM7B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,aAAa2C,WAAW,EAAE,EAAE;MACjEb,MAAM,EAAE,KAAK;MACbpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;EAEA,MAAM8B,UAAUA,CAACC,SAAS,EAAE;IAC1B,MAAM/B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,aAAa+C,SAAS,EAAE,EAAE;MAC/DjB,MAAM,EAAE,KAAK;MACbpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;EAEA,MAAMgC,aAAaA,CAACD,SAAS,EAAEE,WAAW,EAAE;IAC1C,MAAMjC,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,aAAa+C,SAAS,EAAE,EAAE;MAC/DjB,MAAM,EAAE,KAAK;MACbpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;MAC1BsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACgB,WAAW;IAClC,CAAC,CAAC;IAEF,OAAO,IAAI,CAAClC,cAAc,CAACC,QAAQ,CAAC;EACtC;;EAEA;EACA,MAAMkC,WAAWA,CAACH,SAAS,EAAE;IAC3B,MAAM/B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,qBAAqB+C,SAAS,EAAE,EAAE;MACvEjB,MAAM,EAAE,MAAM;MACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;EAEA,MAAMmC,aAAaA,CAACJ,SAAS,EAAE;IAC7B,MAAM/B,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,qBAAqB+C,SAAS,EAAE,EAAE;MACvEjB,MAAM,EAAE,QAAQ;MAChBpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;EAEA,MAAMoC,qBAAqBA,CAACL,SAAS,EAAEM,OAAO,GAAG,EAAE,EAAE;IACnD,MAAMrC,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,sBAAsB,EAAE;MAC7D8B,MAAM,EAAE,MAAM;MACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;MAC1BsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEqB,EAAE,EAAEP,SAAS;QAAEM;MAAQ,CAAC;IACjD,CAAC,CAAC;IAEF,OAAO,IAAI,CAACtC,cAAc,CAACC,QAAQ,CAAC;EACtC;;EAEA;EACA,MAAMuC,WAAWA,CAACC,MAAM,EAAE;IACxB,MAAMxC,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,aAAawD,MAAM,EAAE,EAAE;MAC5D1B,MAAM,EAAE,KAAK;MACbpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC;IAC3B,CAAC,CAAC;IAEF,OAAO,IAAI,CAACM,cAAc,CAACC,QAAQ,CAAC;EACtC;EAEA,MAAMyC,WAAWA,CAACD,MAAM,EAAEE,IAAI,EAAE;IAC9B,MAAM1C,QAAQ,GAAG,MAAMa,KAAK,CAAC,GAAG7B,OAAO,WAAW,EAAE;MAClD8B,MAAM,EAAE,MAAM;MACdpB,OAAO,EAAE,IAAI,CAACD,UAAU,CAAC,CAAC;MAC1BsB,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEqB,EAAE,EAAEE,MAAM;QAAEE;MAAK,CAAC;IAC3C,CAAC,CAAC;IAEF,OAAO,IAAI,CAAC3C,cAAc,CAACC,QAAQ,CAAC;EACtC;;EAEA;EACA2C,eAAeA,CAAA,EAAG;IAChB,OAAO,CAAC,CAAC,IAAI,CAACrD,KAAK;EACrB;AACF;;AAEA;AACA,MAAMsD,UAAU,GAAG,IAAIxD,UAAU,CAAC,CAAC;AACnC,eAAewD,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}