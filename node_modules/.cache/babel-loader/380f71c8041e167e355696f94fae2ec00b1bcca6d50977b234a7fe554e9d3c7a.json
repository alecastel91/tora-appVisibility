{"ast":null,"code":"var _jsxFileName = \"/Users/alessandrocastelbuono/Desktop/tora-app/src/components/screens/MessagesScreen.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useAppContext } from '../../contexts/AppContext';\nimport { dummyProfiles } from '../../data/profiles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessagesScreen = ({\n  onOpenChat\n}) => {\n  _s();\n  const {\n    messages\n  } = useAppContext();\n  const [conversations, setConversations] = useState([]);\n  useEffect(() => {\n    // Build conversations from messages\n    const convos = [];\n\n    // Add conversations from messages\n    Object.keys(messages).forEach(userId => {\n      const userMessages = messages[userId];\n      if (userMessages && userMessages.length > 0) {\n        const profile = dummyProfiles.find(p => p.id === parseInt(userId));\n        if (profile) {\n          const lastMessage = userMessages[userMessages.length - 1];\n          convos.push({\n            id: profile.id,\n            name: profile.name,\n            avatar: profile.avatar,\n            role: profile.role,\n            lastMessage: lastMessage.text,\n            timestamp: getTimeAgo(lastMessage.timestamp),\n            unread: false,\n            rawTimestamp: new Date(lastMessage.timestamp),\n            profile: profile\n          });\n        }\n      }\n    });\n\n    // Sort by most recent first\n    convos.sort((a, b) => b.rawTimestamp - a.rawTimestamp);\n    setConversations(convos);\n  }, [messages]);\n  const getTimeAgo = timestamp => {\n    const now = new Date();\n    const messageTime = new Date(timestamp);\n    const diffMs = now - messageTime;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m`;\n    if (diffHours < 24) return `${diffHours}h`;\n    if (diffDays < 7) return `${diffDays}d`;\n    return messageTime.toLocaleDateString();\n  };\n  const getInitial = name => {\n    return name ? name.charAt(0).toUpperCase() : 'U';\n  };\n  const getAvatarClass = role => {\n    const roleClass = {\n      'ARTIST': 'avatar-artist',\n      'VENUE': 'avatar-venue',\n      'PROMOTER': 'avatar-promoter',\n      'AGENT': 'avatar-agent'\n    };\n    return roleClass[role] || 'avatar-artist';\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen active messages-screen\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"messages-list\",\n      children: conversations.length > 0 ? conversations.map(conv => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message-card\",\n        onClick: () => onOpenChat && onOpenChat(conv.profile),\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message-avatar ${getAvatarClass(conv.role)}`,\n          children: conv.avatar ? /*#__PURE__*/_jsxDEV(\"img\", {\n            src: conv.avatar,\n            alt: conv.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 19\n          }, this) : getInitial(conv.name)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"message-info\",\n            children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n              children: conv.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"message-preview\",\n              children: conv.lastMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"message-time\",\n            children: conv.timestamp\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 15\n        }, this)]\n      }, conv.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 13\n      }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No messages yet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"empty-subtitle\",\n          children: \"Start a conversation by connecting with someone\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n};\n_s(MessagesScreen, \"Y7u8ShY3rpxDJHbegEFm31QkVek=\", false, function () {\n  return [useAppContext];\n});\n_c = MessagesScreen;\nexport default MessagesScreen;\nvar _c;\n$RefreshReg$(_c, \"MessagesScreen\");","map":{"version":3,"names":["React","useState","useEffect","useAppContext","dummyProfiles","jsxDEV","_jsxDEV","MessagesScreen","onOpenChat","_s","messages","conversations","setConversations","convos","Object","keys","forEach","userId","userMessages","length","profile","find","p","id","parseInt","lastMessage","push","name","avatar","role","text","timestamp","getTimeAgo","unread","rawTimestamp","Date","sort","a","b","now","messageTime","diffMs","diffMins","Math","floor","diffHours","diffDays","toLocaleDateString","getInitial","charAt","toUpperCase","getAvatarClass","roleClass","className","children","map","conv","onClick","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/components/screens/MessagesScreen.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useAppContext } from '../../contexts/AppContext';\nimport { dummyProfiles } from '../../data/profiles';\n\nconst MessagesScreen = ({ onOpenChat }) => {\n  const { messages } = useAppContext();\n  const [conversations, setConversations] = useState([]);\n\n  useEffect(() => {\n    // Build conversations from messages\n    const convos = [];\n    \n    // Add conversations from messages\n    Object.keys(messages).forEach(userId => {\n      const userMessages = messages[userId];\n      if (userMessages && userMessages.length > 0) {\n        const profile = dummyProfiles.find(p => p.id === parseInt(userId));\n        if (profile) {\n          const lastMessage = userMessages[userMessages.length - 1];\n          convos.push({\n            id: profile.id,\n            name: profile.name,\n            avatar: profile.avatar,\n            role: profile.role,\n            lastMessage: lastMessage.text,\n            timestamp: getTimeAgo(lastMessage.timestamp),\n            unread: false,\n            rawTimestamp: new Date(lastMessage.timestamp),\n            profile: profile\n          });\n        }\n      }\n    });\n\n    // Sort by most recent first\n    convos.sort((a, b) => b.rawTimestamp - a.rawTimestamp);\n    \n    setConversations(convos);\n  }, [messages]);\n\n  const getTimeAgo = (timestamp) => {\n    const now = new Date();\n    const messageTime = new Date(timestamp);\n    const diffMs = now - messageTime;\n    const diffMins = Math.floor(diffMs / 60000);\n    const diffHours = Math.floor(diffMs / 3600000);\n    const diffDays = Math.floor(diffMs / 86400000);\n\n    if (diffMins < 1) return 'Just now';\n    if (diffMins < 60) return `${diffMins}m`;\n    if (diffHours < 24) return `${diffHours}h`;\n    if (diffDays < 7) return `${diffDays}d`;\n    return messageTime.toLocaleDateString();\n  };\n\n  const getInitial = (name) => {\n    return name ? name.charAt(0).toUpperCase() : 'U';\n  };\n\n  const getAvatarClass = (role) => {\n    const roleClass = {\n      'ARTIST': 'avatar-artist',\n      'VENUE': 'avatar-venue',\n      'PROMOTER': 'avatar-promoter',\n      'AGENT': 'avatar-agent'\n    };\n    return roleClass[role] || 'avatar-artist';\n  };\n\n  return (\n    <div className=\"screen active messages-screen\">\n      <div className=\"messages-list\">\n        {conversations.length > 0 ? (\n          conversations.map(conv => (\n            <div \n              key={conv.id} \n              className=\"message-card\"\n              onClick={() => onOpenChat && onOpenChat(conv.profile)}\n            >\n              <div className={`message-avatar ${getAvatarClass(conv.role)}`}>\n                {conv.avatar ? (\n                  <img src={conv.avatar} alt={conv.name} />\n                ) : (\n                  getInitial(conv.name)\n                )}\n              </div>\n              <div className=\"message-content\">\n                <div className=\"message-info\">\n                  <h3>{conv.name}</h3>\n                  <p className=\"message-preview\">{conv.lastMessage}</p>\n                </div>\n                <span className=\"message-time\">{conv.timestamp}</span>\n              </div>\n            </div>\n          ))\n        ) : (\n          <div className=\"empty-state\">\n            <p>No messages yet</p>\n            <span className=\"empty-subtitle\">Start a conversation by connecting with someone</span>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default MessagesScreen;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}