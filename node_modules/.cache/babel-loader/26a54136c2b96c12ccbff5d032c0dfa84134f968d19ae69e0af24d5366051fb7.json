{"ast":null,"code":"var _jsxFileName = \"/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/LanguageContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport en from '../translations/en';\nimport ja from '../translations/ja';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst LanguageContext = /*#__PURE__*/createContext();\nconst translations = {\n  en: en,\n  ja: ja\n};\nexport const useLanguage = () => {\n  _s();\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within LanguageProvider');\n  }\n  return context;\n};\n_s(useLanguage, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const LanguageProvider = ({\n  children\n}) => {\n  _s2();\n  const [language, setLanguage] = useState(() => {\n    // Get saved language from localStorage or default to English\n    return localStorage.getItem('appLanguage') || 'en';\n  });\n  useEffect(() => {\n    // Save language preference to localStorage\n    localStorage.setItem('appLanguage', language);\n  }, [language]);\n  const t = key => {\n    const keys = key.split('.');\n    let translation = translations[language];\n    for (const k of keys) {\n      var _translation;\n      translation = (_translation = translation) === null || _translation === void 0 ? void 0 : _translation[k];\n    }\n\n    // If translation not found, try English as fallback\n    if (!translation) {\n      let fallback = translations.en;\n      for (const k of keys) {\n        var _fallback;\n        fallback = (_fallback = fallback) === null || _fallback === void 0 ? void 0 : _fallback[k];\n      }\n      return fallback || key;\n    }\n    return translation;\n  };\n  const changeLanguage = newLanguage => {\n    if (translations[newLanguage]) {\n      setLanguage(newLanguage);\n    }\n  };\n  const availableLanguages = [{\n    code: 'en',\n    name: 'English',\n    nativeName: 'English'\n  }, {\n    code: 'ja',\n    name: 'Japanese',\n    nativeName: '日本語'\n  }];\n  const value = {\n    language,\n    t,\n    changeLanguage,\n    availableLanguages\n  };\n  return /*#__PURE__*/_jsxDEV(LanguageContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n_s2(LanguageProvider, \"IYQGgJMDj1uJrHMjsLnuXjeA7iU=\");\n_c = LanguageProvider;\nvar _c;\n$RefreshReg$(_c, \"LanguageProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","en","ja","jsxDEV","_jsxDEV","LanguageContext","translations","useLanguage","_s","context","Error","LanguageProvider","children","_s2","language","setLanguage","localStorage","getItem","setItem","t","key","keys","split","translation","k","_translation","fallback","_fallback","changeLanguage","newLanguage","availableLanguages","code","name","nativeName","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/LanguageContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport en from '../translations/en';\nimport ja from '../translations/ja';\n\nconst LanguageContext = createContext();\n\nconst translations = {\n  en: en,\n  ja: ja\n};\n\nexport const useLanguage = () => {\n  const context = useContext(LanguageContext);\n  if (!context) {\n    throw new Error('useLanguage must be used within LanguageProvider');\n  }\n  return context;\n};\n\nexport const LanguageProvider = ({ children }) => {\n  const [language, setLanguage] = useState(() => {\n    // Get saved language from localStorage or default to English\n    return localStorage.getItem('appLanguage') || 'en';\n  });\n\n  useEffect(() => {\n    // Save language preference to localStorage\n    localStorage.setItem('appLanguage', language);\n  }, [language]);\n\n  const t = (key) => {\n    const keys = key.split('.');\n    let translation = translations[language];\n    \n    for (const k of keys) {\n      translation = translation?.[k];\n    }\n    \n    // If translation not found, try English as fallback\n    if (!translation) {\n      let fallback = translations.en;\n      for (const k of keys) {\n        fallback = fallback?.[k];\n      }\n      return fallback || key;\n    }\n    \n    return translation;\n  };\n\n  const changeLanguage = (newLanguage) => {\n    if (translations[newLanguage]) {\n      setLanguage(newLanguage);\n    }\n  };\n\n  const availableLanguages = [\n    { code: 'en', name: 'English', nativeName: 'English' },\n    { code: 'ja', name: 'Japanese', nativeName: '日本語' }\n  ];\n\n  const value = {\n    language,\n    t,\n    changeLanguage,\n    availableLanguages\n  };\n\n  return (\n    <LanguageContext.Provider value={value}>\n      {children}\n    </LanguageContext.Provider>\n  );\n};"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC7E,OAAOC,EAAE,MAAM,oBAAoB;AACnC,OAAOC,EAAE,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,eAAe,gBAAGR,aAAa,CAAC,CAAC;AAEvC,MAAMS,YAAY,GAAG;EACnBL,EAAE,EAAEA,EAAE;EACNC,EAAE,EAAEA;AACN,CAAC;AAED,OAAO,MAAMK,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,OAAO,GAAGX,UAAU,CAACO,eAAe,CAAC;EAC3C,IAAI,CAACI,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,kDAAkD,CAAC;EACrE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,WAAW;AAQxB,OAAO,MAAMI,gBAAgB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EAChD,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGhB,QAAQ,CAAC,MAAM;IAC7C;IACA,OAAOiB,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,IAAI;EACpD,CAAC,CAAC;EAEFjB,SAAS,CAAC,MAAM;IACd;IACAgB,YAAY,CAACE,OAAO,CAAC,aAAa,EAAEJ,QAAQ,CAAC;EAC/C,CAAC,EAAE,CAACA,QAAQ,CAAC,CAAC;EAEd,MAAMK,CAAC,GAAIC,GAAG,IAAK;IACjB,MAAMC,IAAI,GAAGD,GAAG,CAACE,KAAK,CAAC,GAAG,CAAC;IAC3B,IAAIC,WAAW,GAAGjB,YAAY,CAACQ,QAAQ,CAAC;IAExC,KAAK,MAAMU,CAAC,IAAIH,IAAI,EAAE;MAAA,IAAAI,YAAA;MACpBF,WAAW,IAAAE,YAAA,GAAGF,WAAW,cAAAE,YAAA,uBAAXA,YAAA,CAAcD,CAAC,CAAC;IAChC;;IAEA;IACA,IAAI,CAACD,WAAW,EAAE;MAChB,IAAIG,QAAQ,GAAGpB,YAAY,CAACL,EAAE;MAC9B,KAAK,MAAMuB,CAAC,IAAIH,IAAI,EAAE;QAAA,IAAAM,SAAA;QACpBD,QAAQ,IAAAC,SAAA,GAAGD,QAAQ,cAAAC,SAAA,uBAARA,SAAA,CAAWH,CAAC,CAAC;MAC1B;MACA,OAAOE,QAAQ,IAAIN,GAAG;IACxB;IAEA,OAAOG,WAAW;EACpB,CAAC;EAED,MAAMK,cAAc,GAAIC,WAAW,IAAK;IACtC,IAAIvB,YAAY,CAACuB,WAAW,CAAC,EAAE;MAC7Bd,WAAW,CAACc,WAAW,CAAC;IAC1B;EACF,CAAC;EAED,MAAMC,kBAAkB,GAAG,CACzB;IAAEC,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,SAAS;IAAEC,UAAU,EAAE;EAAU,CAAC,EACtD;IAAEF,IAAI,EAAE,IAAI;IAAEC,IAAI,EAAE,UAAU;IAAEC,UAAU,EAAE;EAAM,CAAC,CACpD;EAED,MAAMC,KAAK,GAAG;IACZpB,QAAQ;IACRK,CAAC;IACDS,cAAc;IACdE;EACF,CAAC;EAED,oBACE1B,OAAA,CAACC,eAAe,CAAC8B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAtB,QAAA,EACpCA;EAAQ;IAAAwB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACe,CAAC;AAE/B,CAAC;AAAC1B,GAAA,CAtDWF,gBAAgB;AAAA6B,EAAA,GAAhB7B,gBAAgB;AAAA,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}