{"ast":null,"code":"var _jsxFileName = \"/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/AppContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { mockUsers, mockConversations, mockExploreFeed } from '../services/mockData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext();\nexport const useAppContext = () => {\n  _s();\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within AppProvider');\n  }\n  return context;\n};\n_s(useAppContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AppProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState({\n    id: 1,\n    name: 'John Doe',\n    role: 'DJ',\n    bio: 'Electronic music enthusiast with 10+ years of experience.',\n    location: 'Berlin, Germany',\n    avatar: '/avatar.jpg',\n    genres: ['Techno', 'House', 'Minimal']\n  });\n  const [searchResults, setSearchResults] = useState([]);\n  const [conversations, setConversations] = useState(mockConversations);\n  const [exploreFeed, setExploreFeed] = useState(mockExploreFeed);\n  const [messages, setMessages] = useState({});\n  const [notifications, setNotifications] = useState([]);\n  const updateUser = updates => {\n    setUser(prev => ({\n      ...prev,\n      ...updates\n    }));\n  };\n  const searchUsers = (query, filters) => {\n    let results = mockUsers;\n    if (query) {\n      results = results.filter(u => u.name.toLowerCase().includes(query.toLowerCase()) || u.role.toLowerCase().includes(query.toLowerCase()));\n    }\n    if (filters.role && filters.role !== 'all') {\n      results = results.filter(u => u.role === filters.role);\n    }\n    if (filters.location) {\n      results = results.filter(u => u.location.toLowerCase().includes(filters.location.toLowerCase()));\n    }\n    if (filters.genres && filters.genres.length > 0) {\n      results = results.filter(u => filters.genres.some(genre => {\n        var _u$genres;\n        return (_u$genres = u.genres) === null || _u$genres === void 0 ? void 0 : _u$genres.includes(genre);\n      }));\n    }\n    setSearchResults(results);\n  };\n  const sendMessage = (userId, text) => {\n    const newMessage = {\n      text,\n      timestamp: new Date().toISOString(),\n      isMe: true\n    };\n    setMessages(prev => ({\n      ...prev,\n      [userId]: [...(prev[userId] || []), newMessage]\n    }));\n    setTimeout(() => {\n      const autoReply = {\n        text: \"Thanks for your message! I'll get back to you soon.\",\n        timestamp: new Date().toISOString(),\n        isMe: false\n      };\n      setMessages(prev => ({\n        ...prev,\n        [userId]: [...prev[userId], autoReply]\n      }));\n    }, 1500);\n  };\n  const addNotification = notification => {\n    setNotifications(prev => [notification, ...prev]);\n  };\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n  const value = {\n    user,\n    updateUser,\n    searchResults,\n    searchUsers,\n    conversations,\n    exploreFeed,\n    messages,\n    sendMessage,\n    notifications,\n    addNotification,\n    clearNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(AppContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n};\n_s2(AppProvider, \"kBVAltW/RYdeRQ8PoxTm5w4cm7k=\");\n_c = AppProvider;\nvar _c;\n$RefreshReg$(_c, \"AppProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","mockUsers","mockConversations","mockExploreFeed","jsxDEV","_jsxDEV","AppContext","useAppContext","_s","context","Error","AppProvider","children","_s2","user","setUser","id","name","role","bio","location","avatar","genres","searchResults","setSearchResults","conversations","setConversations","exploreFeed","setExploreFeed","messages","setMessages","notifications","setNotifications","updateUser","updates","prev","searchUsers","query","filters","results","filter","u","toLowerCase","includes","length","some","genre","_u$genres","sendMessage","userId","text","newMessage","timestamp","Date","toISOString","isMe","setTimeout","autoReply","addNotification","notification","clearNotifications","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alessandrocastelbuono/Desktop/tora-app/src/contexts/AppContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\nimport { mockUsers, mockConversations, mockExploreFeed } from '../services/mockData';\n\nconst AppContext = createContext();\n\nexport const useAppContext = () => {\n  const context = useContext(AppContext);\n  if (!context) {\n    throw new Error('useAppContext must be used within AppProvider');\n  }\n  return context;\n};\n\nexport const AppProvider = ({ children }) => {\n  const [user, setUser] = useState({\n    id: 1,\n    name: 'John Doe',\n    role: 'DJ',\n    bio: 'Electronic music enthusiast with 10+ years of experience.',\n    location: 'Berlin, Germany',\n    avatar: '/avatar.jpg',\n    genres: ['Techno', 'House', 'Minimal']\n  });\n\n  const [searchResults, setSearchResults] = useState([]);\n  const [conversations, setConversations] = useState(mockConversations);\n  const [exploreFeed, setExploreFeed] = useState(mockExploreFeed);\n  const [messages, setMessages] = useState({});\n  const [notifications, setNotifications] = useState([]);\n\n  const updateUser = (updates) => {\n    setUser(prev => ({ ...prev, ...updates }));\n  };\n\n  const searchUsers = (query, filters) => {\n    let results = mockUsers;\n    \n    if (query) {\n      results = results.filter(u => \n        u.name.toLowerCase().includes(query.toLowerCase()) ||\n        u.role.toLowerCase().includes(query.toLowerCase())\n      );\n    }\n\n    if (filters.role && filters.role !== 'all') {\n      results = results.filter(u => u.role === filters.role);\n    }\n\n    if (filters.location) {\n      results = results.filter(u => \n        u.location.toLowerCase().includes(filters.location.toLowerCase())\n      );\n    }\n\n    if (filters.genres && filters.genres.length > 0) {\n      results = results.filter(u => \n        filters.genres.some(genre => u.genres?.includes(genre))\n      );\n    }\n\n    setSearchResults(results);\n  };\n\n  const sendMessage = (userId, text) => {\n    const newMessage = {\n      text,\n      timestamp: new Date().toISOString(),\n      isMe: true\n    };\n\n    setMessages(prev => ({\n      ...prev,\n      [userId]: [...(prev[userId] || []), newMessage]\n    }));\n\n    setTimeout(() => {\n      const autoReply = {\n        text: \"Thanks for your message! I'll get back to you soon.\",\n        timestamp: new Date().toISOString(),\n        isMe: false\n      };\n      setMessages(prev => ({\n        ...prev,\n        [userId]: [...prev[userId], autoReply]\n      }));\n    }, 1500);\n  };\n\n  const addNotification = (notification) => {\n    setNotifications(prev => [notification, ...prev]);\n  };\n\n  const clearNotifications = () => {\n    setNotifications([]);\n  };\n\n  const value = {\n    user,\n    updateUser,\n    searchResults,\n    searchUsers,\n    conversations,\n    exploreFeed,\n    messages,\n    sendMessage,\n    notifications,\n    addNotification,\n    clearNotifications\n  };\n\n  return (\n    <AppContext.Provider value={value}>\n      {children}\n    </AppContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}